{
  "global": {
    "beforeRequest": "import { HttpTransportHookRequest, SKIP, CANCEL } from 'generated/fireboom.hooks'\nimport type { WunderGraphRequest } from 'fireboom-wundersdk/server'\n\nexport default async function beforeOriginRequest(hook: HttpTransportHookRequest) : Promise<WunderGraphRequest | SKIP | CANCEL>{\n\t// TODO: 在此处添加代码\n\treturn hook.request\n}",
    "onRequest": "import { HttpTransportHookRequest, SKIP, CANCEL } from 'generated/fireboom.hooks'\nimport type { WunderGraphRequest } from 'fireboom-wundersdk/server'\n\nexport default async function onOriginRequest(hook: HttpTransportHookRequest) : Promise<WunderGraphRequest | SKIP | CANCEL>{\n\t// TODO: 在此处添加代码\n\treturn hook.request\n}",
    "onResponse": "import { HttpTransportHookRequestWithResponse, SKIP, CANCEL } from 'generated/fireboom.hooks'\nimport type { WunderGraphResponse } from 'fireboom-wundersdk/server'\n\nexport default async function onOriginResponse(hook: HttpTransportHookRequestWithResponse) : Promise<WunderGraphResponse | SKIP | CANCEL>{\n\t// TODO: 在此处添加代码\n\treturn hook.response\n}",
    "onConnectionInit": "import type { WsTransportHookRequest } from 'generated/fireboom.hooks'\nimport type { WsTransportOnConnectionInitResponse } from 'fireboom-wundersdk/server'\n\nexport default async function onConnectionInit(hook: WsTransportHookRequest): Promise<WsTransportOnConnectionInitResponse> {\n  return {\n    payload: {\n      // your code here\n    }\n  }\n}"
  },
  "auth": {
    "postAuthentication": "import { AuthenticationHookRequest } from 'fireboom-wundersdk/server'\n\nexport default async function postAuthentication(hook: AuthenticationHookRequest) : Promise<void>{\n\t// TODO: 在此处添加代码\n}",
    "mutatingPostAuthentication": "import { AuthenticationHookRequest, AuthenticationResponse } from 'fireboom-wundersdk/server'\nimport type { User } from \"generated/claims\"\nexport default async function mutatingPostAuthentication(hook: AuthenticationHookRequest) : Promise<AuthenticationResponse<User>>{\n\t// TODO: 在此处添加代码\n\treturn {\n\t\tstatus:'deny',\n\t\tmessage: 'string'\n\t}\n}",
    "revalidateAuthentication": "import { AuthenticationHookRequest, AuthenticationResponse } from 'fireboom-wundersdk/server'\nimport type { User } from \"generated/claims\"\nexport default async function revalidate(hook: AuthenticationHookRequest) : Promise<AuthenticationResponse<User>>{\n  // TODO: 在此处添加代码\n  return {\n    status:'deny',\n    message: 'string'\n  }\n}",
    "postLogout": "import { AuthenticationHookRequest, AuthenticationResponse } from 'fireboom-wundersdk/server'\n\nexport default async function postLogout(hook: AuthenticationHookRequest) : Promise<void>{\n\t// TODO: 在此处添加代码\n}"
  },
  "hook": {
    "WithInput": {
      "mockResolve": "import { HookRequestWithInput } from 'generated/fireboom.hooks'\nimport { Injected$HOOK_NAME$Input, $HOOK_NAME$Response } from 'generated/models'\n\nexport default async function mockResolve(hook: HookRequestWithInput<Injected$HOOK_NAME$Input>)\n  //: Promise<$HOOK_NAME$Response>{ // 取消注释以使用严格的返回类型\n  : Promise<any>{\n\t// TODO: 在此处添加代码\n}",
      "preResolve": "import { HookRequestWithInput } from 'generated/fireboom.hooks'\nimport { Injected$HOOK_NAME$Input } from 'generated/models'\n\nexport default async function preResolve(hook: HookRequestWithInput<Injected$HOOK_NAME$Input>) : Promise<void>{\n\t// TODO: 在此处添加代码\n}",
      "mutatingPreResolve": "import { HookRequestWithInput } from 'generated/fireboom.hooks'\nimport { Injected$HOOK_NAME$Input } from 'generated/models'\n\nexport default async function mutatingPreResolve(hook: HookRequestWithInput<Injected$HOOK_NAME$Input>) : Promise<Injected$HOOK_NAME$Input>{\n\t// TODO: 在此处添加代码\n\treturn hook.input\n}",
      "postResolve": "import { HookRequestWithInput, HookRequestWithResponse } from 'generated/fireboom.hooks'\nimport { Injected$HOOK_NAME$Input, $HOOK_NAME$Response } from 'generated/models'\n\nexport default async function postResolve(hook: HookRequestWithInput<Injected$HOOK_NAME$Input> & HookRequestWithResponse<$HOOK_NAME$Response>) : Promise<void>{\n\t// TODO: 在此处添加代码\n}",
      "customResolve": "import { HookRequestWithInput } from 'generated/fireboom.hooks'\nimport { Injected$HOOK_NAME$Input, $HOOK_NAME$Response } from 'generated/models'\n\nexport default async function customResolve(hook: HookRequestWithInput<Injected$HOOK_NAME$Input>)\n  //: Promise<void | $HOOK_NAME$Response>{ // 取消注释以使用严格的返回类型\n  : Promise<any>{\n\t// TODO: 在此处添加代码\n}",
      "mutatingPostResolve": "import { HookRequestWithInput, HookRequestWithResponse } from 'generated/fireboom.hooks'\nimport { Injected$HOOK_NAME$Input, $HOOK_NAME$Response } from 'generated/models'\n\nexport default async function mutatingPostResolve(hook: HookRequestWithInput<Injected$HOOK_NAME$Input> & HookRequestWithResponse<$HOOK_NAME$Response>)\n  //: Promise<$HOOK_NAME$Response>{ // 取消注释以使用严格的返回类型\n  : Promise<any>{\n\t// TODO: 在此处添加代码\n\treturn hook.response\n}"
    },
    "WithoutInput": {
      "mockResolve": "import { HookRequest } from 'generated/fireboom.hooks'\nimport { $HOOK_NAME$Response } from 'generated/models'\n\nexport default async function mockResolve(hook: HookRequest)\n  //: Promise<$HOOK_NAME$Response>{ // 取消注释以使用严格的返回类型\n  : Promise<any>{\n\t// TODO: 在此处添加代码\n}",
      "preResolve": "import { HookRequest } from 'generated/fireboom.hooks'\n\nexport default async function preResolve(hook: HookRequest) : Promise<void>{\n\t// TODO: 在此处添加代码\n}",
      "postResolve": "import { HookRequest, HookRequestWithResponse } from 'generated/fireboom.hooks'\nimport { $HOOK_NAME$Response } from 'generated/models'\n\nexport default async function postResolve(hook: HookRequest & HookRequestWithResponse<$HOOK_NAME$Response>) : Promise<void>{\n\t// TODO: 在此处添加代码\n}",
      "customResolve": "import { HookRequest } from 'generated/fireboom.hooks'\nimport { $HOOK_NAME$Response } from 'generated/models'\n\nexport default async function customResolve(hook: HookRequest)\n  //: Promise<void | $HOOK_NAME$Response>{ // 取消注释以使用严格的返回类型\n  : Promise<any>{\n\t// TODO: 在此处添加代码\n}",
      "mutatingPostResolve": "import { HookRequest, HookRequestWithResponse } from 'generated/fireboom.hooks'\nimport { $HOOK_NAME$Response } from 'generated/models'\n\nexport default async function mutatingPostResolve(hook: HookRequest & HookRequestWithResponse<$HOOK_NAME$Response>)\n  //: Promise<$HOOK_NAME$Response>{ // 取消注释以使用严格的返回类型\n  : Promise<any>{\n\t// TODO: 在此处添加代码\n\treturn hook.response\n}"
    }
  },
  "custom": "import { GraphQLObjectType, GraphQLSchema, GraphQLString } from 'graphql'\nimport { FastifyBaseLogger } from 'fastify/types/logger'\nimport { InternalClient } from 'fireboom-wundersdk/server'\nimport { Mutations, Queries } from 'generated/fireboom.internal.client';\n\nexport default new GraphQLSchema({\n  query: new GraphQLObjectType<any, {\n    wundergraph: {\n      log: FastifyBaseLogger,\n      internalClient: InternalClient<Queries, Mutations>\n    }\n  }>({\n    name: 'Query',\n    fields: {\n      hello: {\n        type: GraphQLString,\n        resolve() {\n          return 'world'\n        },\n      },\n    },\n  }),\n})",
  "example": {
    "postAuthentication": [
      {
        "name": "OIDC登录示例",
        "code": "import { Client } from 'generated/fireboom.client'\nimport { AuthenticationHookRequest } from 'fireboom-wundersdk/server'\n\nexport default async function postAuthentication(hook: AuthenticationHookRequest) : Promise<void>{\n  if (hook.user) {\n    const client = new Client({})\n    const { avatarUrl, email, name, nickName, provider, providerId, userId } = hook.user\n    const resp = await client.query.GetOneUser({\n      input: {\n        // provider: provider!,\n        providerId: providerId!,\n        providerUserId: userId!\n      }\n    })\n    if (resp.status === 'ok') {\n      if (!resp.body.errors) {\n        const existedUser = resp.body.data!.data\n        if (!existedUser) {\n          const _name = nickName || name || email!\n          const rest = await client.mutation.CreateOneUser({\n            input: {\n              data: {\n                name: _name,\n                provider: provider!,\n                providerId: providerId!,\n                providerUserId: userId!,\n                avatarUrl: avatarUrl\n              }\n            }\n          })\n          if (rest.status === 'ok') {\n            if (!rest.body.errors) {\n              console.info(`Success sync user: ${providerId} - ${_name}`)\n            }\n          }\n        }\n      }\n    }\n  }\n}"
      }
    ],
    "custom": [
      {
        "name": "示例数据源",
        "code": "import { GraphQLObjectType, GraphQLSchema, GraphQLString, GraphQLFloat, GraphQLNonNull, GraphQLID } from 'graphql'\nimport { FastifyBaseLogger } from 'fastify/types/logger'\nimport { InternalClient } from 'fireboom-wundersdk/server'\nimport { Mutations, Queries } from 'generated/fireboom.internal.client';\n\nexport default new GraphQLSchema({\n  query: new GraphQLObjectType<{\n    arg1: string,\n    arg2?: number\n  }, {\n    wundergraph: {\n      log: FastifyBaseLogger,\n      internalClient: InternalClient<Queries, Mutations>\n    }\n  }>({\n    name: 'Query',\n    fields: {\n      OperationName: {\n        // parameters\n        args: {\n          arg1: {\n            // required\n            type: new GraphQLNonNull(GraphQLString)\n          },\n          arg2: {\n            // optional\n            type: GraphQLFloat\n          }\n        },\n        // response\n        type: new GraphQLObjectType({\n          fields: {\n            field1: {\n              type: GraphQLID,\n            },\n            field2: {\n              type: GraphQLString\n            }\n          },\n          name: 'data'\n        }),\n        resolve(source, args, ctx) {\n          // do something\n        }\n      }\n    }\n  })\n})"
      }
    ]
  },
  "upload": {
    "preUpload": "import { Uploads } from 'generated/fireboom.hooks'\n\nconst preUpload: NonNullable<NonNullable<NonNullable<Uploads['$STORAGE_NAME$']>['$PROFILE_NAME$']>['preUpload']> = ({ user, file, meta }) => {\n  // TODO 在这里添加逻辑\n}\n\nexport default preUpload",
    "postUpload": "import { Uploads } from 'generated/fireboom.hooks'\n\nconst postUpload: NonNullable<NonNullable<NonNullable<Uploads['$STORAGE_NAME$']>['$PROFILE_NAME$']>['postUpload']> = async ({ user, file, meta, internalClient, error }) => {\n  // TODO 在这里添加逻辑\n}\n\nexport default postUpload"
  }
}
